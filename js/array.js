"use strict"; // –∫–æ–¥ –≤ —Å—É–≤–æ—Ä–æ–º—É —Ä–µ–∂–∏–º—ñ
// js doka - 2:45 –í–∏–¥–µ–æ –†–∏—Å—ñ—á–∞ 4_2

console.log("Hello from array.js");
console.log("–¢–µ–º–∞. –ü–µ—Ä–µ–±–∏—Ä–∞—é—á—ñ –º–µ—Ç–æ–¥–∏ –º–∞—Å–∏–≤—É");

// === forEach ===
console.log("–ú–µ—Ç–æ–¥ forEach()");

const numbers = [5, 10, 15];
numbers.forEach(function (number, index) {
    console.log(`Index: ${index} Number:  ${number}`);
})

// === map ===
console.log(" ");
console.log("–ú–µ—Ç–æ–¥ map()");

const students = [
    { name: "–ú–∞–Ω–≥–æ", score: 83 },
    { name: "–ü–æ–ª—ñ", score: 59 },
    { name: "–ê—è–∫—Å", score: 37 },
  ];


const names = students.map( student => student.name);
console.log(names);

// === flatMap ===
console.log(" ");
console.log("–ú–µ—Ç–æ–¥ flatMap()");

const students_2 = [
    { name: "–ú–∞–Ω–≥–æ", courses: ["–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "—Ñ—ñ–∑–∏–∫–∞"] },
    { name: "–ü–æ–ª—ñ", courses: ["—ñ–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞", "–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞"] },
];

const allCourses = students_2.flatMap(student => student.courses);
console.log(allCourses);

// === filter ===
console.log(" ");
console.log("–ú–µ—Ç–æ–¥ filter()");

const values_2 = [51, -3, 27, 21, -68];
const positivVal = values_2.filter(val => val > 0);
console.log(positivVal);
console.log(`positivVal ${positivVal}`);

// === filter —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ ===
console.log(" ");
console.log("filter —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤");
const courses = ['–º–∞—Ç', '—Ñ—ñ–∑', '—ñ–Ω—Ñ', '–º–∞—Ç', '—Ñ—ñ–∑', '–±—ñ–æ'];

const uniqueCourses = courses.filter(
    (course, index, array) => array.indexOf(course) === index );
console.log(uniqueCourses);


// === filter –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –º–∞—Å–∏–≤—É –æ–±'—î–∫—Ç—ñ–≤ ===
console.log(" ");
console.log("–§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –º–∞—Å–∏–≤—É –æ–±'—î–∫—Ç—ñ–≤");

const students_3 = [
  { name: "–ú–∞–Ω–≥–æ", score: 83 },
  { name: "–ü–æ–ª—ñ", score: 49 },
  { name: "–ê—è–∫—Å", score: 37 },
  { name: "–ö—ñ–≤—ñ", score: 94 },
];

const best_studs = students_3.filter( stud => stud.score > 50);
console.log(best_studs);


// === find ===
console.log(" ");
console.log("–ú–µ—Ç–æ–¥ find()");

const colorPickers = [
    { label: "red", color: "#F44336" },
    { label: "green", color: "#4CAF50" },
    { label: "blue", color: "#2196F3" },
  ];

const colorBlue = colorPickers.find(color => color.label === "blue");
console.log(colorBlue);

// === every / some ===
console.log(" ");
console.log("–ú–µ—Ç–æ–¥ every / some");

const fruits = [
    { name: "apples", amount: 100 },
    { name: "bananas", amount: 0 },
    { name: "grapes", amount: 50 },
];

const allAvailable = fruits.every(fruit => fruit.amount > 0); // false
const anyAvailable = fruits.some(fruits => fruits.amount > 0); // true
console.log(`Every = ${allAvailable}`);
console.log(`Some = ${anyAvailable}`);


// === reduce ===
console.log(" ");
console.log("–ú–µ—Ç–æ–¥ reduce()");

const arr_2 = [2, 7, 3, 14, 6];
console.log(arr_2);

const total_3 = arr_2.reduce((acum, number) => {
    return acum + number;
}, 0);
console.log(total_3);


// reduce –ù–µ–æ–±—Ö—ñ–¥–Ω–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–µ—Ä–µ–¥–Ω—ñ–π –±–∞–ª
const students_4 = [
    { name: "–ú–∞–Ω–≥–æ", score: 83 },
    { name: "–ü–æ–ª—ñ", score: 59 },
    { name: "–ê—è–∫—Å", score: 60 },
    { name: "–ö—ñ–≤—ñ", score: 34 },
    { name: "–•'—é—Å—Ç–æ–Ω", score: 64 },
  ];

const totalScore = students_4.reduce((acum, student)=> {
    return acum + student.score;
}, 0);
const averScore = totalScore / students_4.length;
console.log(totalScore);
console.log(averScore);

// reduce –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –ø–æ—Ä–∞—Ö—É–≤–∞—Ç–∏ —Å—É–º—É —É—Å—ñ—Ö –ª–∞–π–∫—ñ–≤
console.log("–ø–æ—Ä–∞—Ö—É–≤–∞—Ç–∏ —Å—É–º—É –ª–∞–π–∫—ñ–≤");

const tweets = [
    { id: "000", likes: 5, tags: ["js", "nodejs"] },
    { id: "001", likes: 2, tags: ["html", "css"] },
    { id: "002", likes: 17, tags: ["html", "js"] },
    { id: "003", likes: 8, tags: ["css", "react"] },
];

const allLikes = tweets.reduce((acum, tweet) => acum + tweet.likes, 0);
console.log(allLikes);

// reduce –Ω–∞–ø–∏—à–µ–º–æ —Ñ—É–Ω–∫—Ü—ñ—é
const countLikes = tweets => {
    return tweets.reduce((acum, tweet) => acum + tweet.likes, 0);
};

console.log(countLikes(tweets)); //32

//
const tags = tweets.reduce((allTags, tweet) => {
    allTags.push(...tweet.tags);
    return allTags;
  }, []);

// console.log(tags);

// === reduce –Ω–∞–ø–∏—à–µ–º–æ —Ñ—É–Ω–∫—Ü—ñ—é
const getTags = arrays => {
  return arrays.reduce((allTags, tweet)=> {
          allTags.push(...tweet.tags); 
          return allTags;  
    }, []);
}


console.log(getTags(tweets));




// === sort –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –æ–±'—î–∫—Ç—ñ–≤ sort

console.log(" ");
console.log("–ú–µ—Ç–æ–¥ sort()");

const students5 = [
  { name: "–ú–∞–≥–æ", score: 83 },
  { name: "–ü–æ–ª—ñ", score: 59 },
  { name: "–ê—è–∫—Å", score: 37 },
  { name: "–ö—ñ–≤—ñ", score: 94 },
];

    // === sort –ó–∞ –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è–º score ===
const inAscendingScoreOrder = students5.sort(
  (firstStudent, secondStudent) => firstStudent.score - secondStudent.score
);
console.log(inAscendingScoreOrder);

    // === sort –ó–∞ —Å–ø–∞–¥–∞–Ω–Ω—è–º score ===
// const inDescendingScoreOrder = students5.sort(
//   (firstStudent, secondStudent) => secondStudent.score - firstStudent.score
// );
// console.log(inDescendingScoreOrder);

  // === sort –ó–∞ —ñ–º—è–º ===
// const inAlphabeticalOrder = students5.sort((firstStudent, secondStudent) =>
//   firstStudent.name.localeCompare(secondStudent.name)
// );
// console.log(inAlphabeticalOrder);








// ====================================================

// –î–æ–¥–∞—Ç–∏ —ñ–∫–æ–Ω–∫—É: win+:
console.log("–ö–û–ª–±–µ–∫–∏ —Ç–∞ –ú–µ—Ç–æ–¥–∏ –æ–±—î–∫—Ç—ñ–≤");
// const user100 = {
//     name100: "Serg",
//     say1() {
//         console.log(`Hello ${this.name100}`);
//     },
//     say2: ()=>{
//         console.log(`Hello ${this.name100}`);
//     }
// }

// user100.say1();
// user100.say2();



// –ó–∞–¥–∞—á–∞ 1
// –ü–µ—Ä–µ–¥–∞—Ç—å –æ–±–µ–∫—Ç –≤ —Ñ—É —Ç–∞ –∫–æ–ª–±–µ–∫. –î–æ–¥–∞—Ç–∏ —ñ–¥ —Ç–∞ –∑–∞–∫–æ–Ω—Å–æ–ª–∏—Ç–∏.

const prod1 = {
    name: "apple",
    prise: 5,
    quantity: 3,
}

function createProd (obj, callback) {
    const prod = {
        id: Date.now(),
        ...obj,
    }
    callback(prod);
}


function logProd (pro) {
    console.log(pro);
}

function totalProd ({ prise, quantity }) {
    const tota = prise * quantity;
    console.log(tota);
}

createProd(prod1, logProd);
createProd(prod1, totalProd);

console.log("–ó–∞–¥–∞—á–∞ deposit withdrow");
// –ó–∞–¥–∞—á–∞ 2 
/*
    –î–æ–¥–∞—Ç–∏ –≤ –æ—î–∫—Ç account –º–µ—Ç–æ–¥–∏ withdrow (amount, onSuccess, onError) 
    –ü–µ—Ä—à–π –ø–∞—Ä–∞–º —Ü–µ —Å—É–º–∞ –¥—Ä—É–≥ —Ç–∞ —Ç—Ä–µ—Ç —Ü–µ –∫–æ–ª–±–µ–∫–∏

    –ú–µ—Ç–æ–¥ withdrow –≤–∏–∫–ª–∏–∫–∞—î onError —è–∫—â–æ amount –±—ñ–ª—å—à–µ TRANSACTION_LIMIT –∞–±–æ this.balance 
    —ñ onSuccess –≤ —ñ–Ω—à–æ–º—É –≤–∏–ø–∞–¥–∫—É

    –ú–µ—Ç–æ–¥ deposit –≤–∏–∫–ª–∏–∫–∞—î onError —è–∫—â–æ amount –±—ñ–ª—å—à–µ TRANSACTION_LIMIT –∞–±–æ –º–µ–Ω—à–µ –¥–æ—Ä—ñ–≤–Ω—é—î 0
    —ñ onSuccess –≤ —ñ–Ω—à–æ–º—É –≤–∏–ø–∞–¥–∫—É
*/

const TRANSACTION_LIMIT = 1000;


const account = {
    ussername: "Jaco",
    ballance: 1100,
    withdrow(sum, callback1, callback2) {
        if(sum > this.ballance || sum > TRANSACTION_LIMIT) {
            callback2("Not inaf");
            return;
        }
        this.ballance -= sum;
        callback1("Good üëå");   // –î–æ–¥–∞—Ç–∏ —ñ–∫–æ–Ω–∫—É: win+:
    }
}




function handleSuccess (message) {
    console.log(`Success ${message}`);
}

function handleError (message) {
    console.log(`Error ${message}`);
}



// account.withdrow(900, handleSuccess, handleError);
// account.deposit(1700, handleSuccess, handleError);


console.log("–ó–∞–¥–∞—á–∞3 map");
// –ó–∞–¥–∞—á–∞ 3 .map. 
// –¢–∞–∫–∞ —Å–∞–º–æ –¥–æ–≤–∂–∏–Ω–∞!
//  –Ω–µ–ø–∞—Ä–Ω—ñ —á–∏—Å–ª–∞

// const arr = [1,2,3,4,5,6,7];
// const resmap = arr.map((val)=> val%2);
// console.log(resmap);

// // V1
// const arr = [1,2,3,4,5,6,7];
// const resmap = arr.map((val)=> {
//     if(!(val%2)) {
//         return val * 10;
//     }
//     return val;
// });
// console.log(resmap);

// V2
const arr = [1,2,3,4,5,6,7];
const resmap = arr.map((val)=> val%2 ? val * 10 : val );
console.log(resmap);


console.log("–ó–∞–¥–∞—á–∞4 indexOf findIndex ");
// –ó–∞–¥–∞—á–∞ 4 indexOf()-–¥–ª—è –ø—Ä–æ—Å—Ç–∏—Ö or .findIndex()-–¥–ª—è –æ–±—î–∫—Ç—ñ–≤
const arr2 = [1,2,3,4,5,6,7];
const resInd = arr2.indexOf(5); // 4
console.log(resInd);

const arr3 = [{
        name: "Use1",
        skills: ["css", "html"],
    },
    {
        name: "Use1",
        skills: ["node", "html"],
    },
    {
        name: "Use2",
        skills: ["node", "ddd"],
    }
]
const resFaInd = arr3.findIndex(item => item.skills.includes("node"));
console.log(resFaInd); // index 1 or -1


console.log("–ó–∞–¥–∞—á–∞5 filter");
// –ó–∞–¥–∞—á–∞ 5 filter()
const arr4 = [1,2,3,4,5,6,7];
const resFilt = arr4.filter(item => !(item%2));
console.log(resFilt);


// ===================================================

// –ü—Ä–∏–∫–ª–∞–¥–∏:
// .map –ù–µ—Ö–∞–π —Ñ getModels –ø–æ–≤–µ—Ä—Ç–∞—î –º–∞—Å–∏–≤ –º–æ–¥–µ–ª–µ–π

const cars = [
  { make: "honda", model: "C-RV", amount: 14, price: 24050, type: "sub" },
  { make: "mazda", model: "CX-9", amount: 10, price: 20050, type: "sed" },
  { make: "ford", model: "F-150", amount: 5, price: 14050, type: "sed" },
  { make: "honda", model: "C-RV", amount: 8, price: 4050, type: "sub" },
  { make: "mazda", model: "CX-7", amount: 2, price: 34050, type: "sed" },
]

// V1 .map - –º–∞—Å–∏–≤ –º–æ–¥–µ–ª–µ–π
console.log("map - –º–∞—Å–∏–≤ –º–æ–¥–µ–ª–µ–π");
const getModels = (arr) => {
  return arr.map( item => item.model );
}
console.log(getModels(cars));


// V2 .map - –º–∞—Å–∏–≤ –æ–±—î–∫—Ç—ñ–≤
console.log("map - –º–∞—Å–∏–≤ –æ–±—î–∫—Ç—ñ–≤ discaunt");
const makeDiscount = (arr, discaunt) => {
    return arr.map( item => ({
      ...item,
      price: item.price * (1-discaunt),
    }))
}

console.table(makeDiscount(cars, 0.2));


// V3 .filter - –º–∞—Å–∏–≤ –æ–±—î–∫—Ç—ñ–≤
console.log("filter - –º–∞—Å–∏–≤ –æ–±—î–∫—Ç—ñ–≤");
const filtPrice = (arr, lim) => {
    return arr.filter(({price})=> price < lim);
}

console.table(filtPrice(cars, 20100));

// V4 .filter2 - –º–∞—Å–∏–≤ –æ–±—î–∫—Ç—ñ–≤
console.log("filter2 - –º–∞—Å–∏–≤ –æ–±—î–∫—Ç—ñ–≤");
const filtType = (arr, type) => arr.filter(({ type: carType }) => carType === type);

console.table(filtType(cars, "sub"));


// V5 .sort - –º–∞—Å–∏–≤ –æ–±—î–∫—Ç—ñ–≤
console.log("–°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑ —Ä–æ–∑–ø–∏–ª–µ–Ω–Ω—è–º");
const sortByPriceq = arr => [...arr].sort((a,b) => a.price - b.price);
console.table(sortByPriceq(cars));

console.table(cars);


// // V6 .reduce - –º–∞—Å–∏–≤ –æ–±—î–∫—Ç—ñ–≤
// const amountCars = arr => arr.reduce((acc, car)=>{
//   return acc += car.amount;
// }, 0);
// console.log(amountCars(cars));

// V6.1 .reduce - –º–∞—Å–∏–≤ –æ–±—î–∫—Ç—ñ–≤ same
const amountCars = arr => arr.reduce((acc, car)=> acc += car.amount, 0);
console.log(amountCars(cars));



const strr = "qwewerqweweeer";
// Task:
// {
//   e: 3,
//   g: 5,
//   ...
// }
console.log(`Start ${strr}`);
const result = strr.split('').reduce((acc, item)=> {
  // V1
  // acc.hasOwnProperty(item) ? acc[item]+=1 : acc[item] = 1;
  // V2
  // item in acc ? acc[item]+=1 : acc[item] = 1;
  // V3
  const keys = Object.keys(acc);
  keys.includes(item) ? acc[item]+=1 : acc[item] = 1;
  return acc;
}, {});
console.log("Result"); console.log(result);


